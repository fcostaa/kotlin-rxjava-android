version: 2
reference:

  ## Workspaces
  workspace: &workspace
               ~/code

  attach_debug_workspace: &attach_debug_workspace
    attach_workspace:
      at: *workspace

  persist_debug_workspace: &persist_debug_workspace
    persist_to_workspace:
      root: *workspace
      paths:
      - apk/build/intermediates
      - apk/build/outputs/androidTest-results
      - apk/build/outputs/apk
      - apk/build/outputs/code-coverage
      - apk/build/test-results

  ## Docker image configurations
  android_config: &android_config
    working_directory: *workspace
    docker:
    - image: circleci/android:api-28
    environment:
      TERM: dumb
      JVM_OPTS: -Xmx4G

  gcloud_config: &gcloud_config
    working_directory: *workspace
    docker:
    - image: google/cloud-sdk:latest
    environment:
      TERM: dumb

  ## Cache
  generate_cache_key: &generate_cache_key
    run:
      name: Generate cache key
      command: ./checksum.sh /tmp/checksum.txt

  gradle_key: &gradle_key
                gradle-{{ checksum "/tmp/checksum.txt" }}

  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_key
      paths:
      - ~/.gradle/caches
      - ~/.gradle/wrapper
      - ~/.android/build-cache

  ## Dependencies
  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  # Google Cloud Service

  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google Cloud Service key environment variable
      command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY | base64 -di > ${HOME}/client-secret.json


jobs:
  lint:
    <<: *android_config
    steps:
    - checkout
    - *generate_cache_key
    - *restore_gradle_cache
    - *android_dependencies
    - *save_gradle_cache
    - run:
        name: Run Lint
        command: ./gradlew detekt lintDebug --console=plain -Dorg.gradle.parallel=false

  can_i_drop_jetifier:
    <<: *android_config
    steps:
    - checkout
    - *generate_cache_key
    - *restore_gradle_cache
    - *android_dependencies
    - *save_gradle_cache
    - run:
        name: "Can I drop Jetifier?"
        command: ./gradlew -Pandroid.enableJetifier=false canIDropJetifier --console=plain -Dorg.gradle.parallel=false

  test:
    <<: *android_config
    steps:
    - checkout
    - *generate_cache_key
    - *restore_gradle_cache
    - *android_dependencies
    - *save_gradle_cache
    - run:
        name: Run Tests
        command: ./gradlew testDebugUnitTest --console=plain -Dorg.gradle.parallel=false
    - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
        path: app/build/reports
        destination: reports
    - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
        path: app/build/test-results
    # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

  build_debug:
    <<: *android_config
    steps:
    - checkout
    - *generate_cache_key
    - *restore_gradle_cache
    - *android_dependencies
    - *save_gradle_cache
    - run:
        name: Gradle build (debug)
        command: ./gradlew assembleDebug --console=plain -Dorg.gradle.parallel=false
        no_output_timeout: 15m
    - *persist_debug_workspace
    - store_artifacts:
        path: apk/build/outputs/apk/
        destination: /apk/

  build_release:
    <<: *android_config
    steps:
      - checkout
      - *generate_cache_key
      - *restore_gradle_cache
      - *android_dependencies
      - *save_gradle_cache
      - run:
          name: "Assemble Release"
          command: ./gradlew assembleRelease --console=plain -Dorg.gradle.parallel=false

  build_instrumented:
    <<: *android_config
    steps:
      - *attach_debug_workspace
      - *generate_cache_key
      - *restore_gradle_cache
      - *android_dependencies
      - *save_gradle_cache
      - run:
          name: Gradle assemble Android Test
          command: ./gradlew assembleAndroidTest --console=plain -Dorg.gradle.parallel=false
          no_output_timeout: 15m
      - store_artifacts:
          path: apk/build/outputs/apk/
          destination: /apk/

  test_instrumented:
    <<: *android_config
    steps:
    - checkout
    - *generate_cache_key
    - *restore_gradle_cache
    - *android_dependencies
    - *save_gradle_cache
    - run:
        name: Gradle build (debug)
        command: ./gradlew assembleDebug assembleAndroidTest --console=plain -Dorg.gradle.daemon=false -Dorg.gradle.parallel=false -Dkotlin.incremental=false
        no_output_timeout: 15m
    - *export_gcloud_key
    - *decode_gcloud_key
    - run:
        name: Set Google Cloud target project
        command: gcloud config set project marvel-app-d5ae2
    - run:
        name: Authenticate with Google Cloud
        command: gcloud auth activate-service-account firebase-adminsdk-p9qvk@newspaper-84169.iam.gserviceaccount.com --key-file ${HOME}/client-secret.json
    - run:
        name: Run instrumented test on Firebase Test Lab
        command: gcloud firebase test android run --type instrumentation --app apk/build/outputs/apk/debug/apk-debug.apk --test apk/build/outputs/apk/androidTest/debug/apk-debug-androidTest.apk --device model=sailfish,version=21,locale=en_US,orientation=portrait --directories-to-pull=/sdcard/tmp --timeout 20m

workflows:
  version: 2
  test_build:
    jobs:
    - lint
    - can_i_drop_jetifier
    - test
    - build_debug:
        requires:
          - lint
          - can_i_drop_jetifier
          - test
    - build_release:
        requires:
        - lint
        - can_i_drop_jetifier
        - test
    - build_instrumented:
        requires:
        - build_debug